{"version":3,"file":"server.cjs","sources":["../src/utils/server-utils.ts","../src/server.ts"],"sourcesContent":["type TMessage = {\n    event: string;\n    data: string;\n    id: number;\n};\n\ntype TMessageHistoryItem = {\n    channelName: string;\n    id: number;\n    message: TMessage;\n};\n\nclass ChannelManager {\n    private channels: Map<string, Set<NodeJS.WritableStream>>;\n\n    constructor() {\n        this.channels = new Map();\n    }\n\n    addClient(channel: string, client: NodeJS.WritableStream): void {\n        const clients = this.getClients(channel);\n        clients.add(client);\n    }\n\n    removeClient(channel: string, client: NodeJS.WritableStream): void {\n        const clients = this.getClients(channel);\n        clients.delete(client);\n        if (clients.size === 0) {\n            this.channels.delete(channel);\n        }\n    }\n\n    getClients(channel: string): Set<NodeJS.WritableStream> {\n        if (!this.channels.has(channel)) {\n            this.channels.set(channel, new Set());\n        }\n        return this.channels.get(channel)!;\n    }\n\n    getConnectionCounts(): Record<string, number> {\n        const result: Record<string, number> = {};\n        for (const [channel, clients] of this.channels.entries()) {\n            result[channel] = clients.size;\n        }\n        return result;\n    }\n\n    getConnectionCount(channel: string): number {\n        const clients = this.channels.get(channel);\n        return clients ? clients.size : 0;\n    }\n}\n\nclass MessageHistory {\n    constructor(\n        private messageHistory: Array<TMessageHistoryItem> = [],\n        private lastId: number = 0,\n    ) {}\n\n    messageHistoryForChannel(\n        channelName: string,\n        lastEventId: number | undefined,\n    ) {\n        return lastEventId !== undefined\n            ? this.messageHistory\n                .filter((item) => item.channelName === channelName)\n                .filter((item) => item.id > lastEventId)\n                .map((item) => item.message)\n            : [];\n    }\n\n    push(channelName: string, message: TMessage) {\n        this.messageHistory.push({ channelName, id: message.id, message });\n\n        // keep last 10000 messages.. TODO: make configurable\n        this.messageHistory = this.messageHistory.slice(-10000);\n    }\n\n    nextId() {\n        this.lastId += 1;\n        return this.lastId;\n    }\n}\n\nexport {\n    ChannelManager,\n    MessageHistory,\n    type TMessage,\n    type TMessageHistoryItem,\n};\n","import { EventEmitter, on } from \"events\";\n\nimport {\n  type FastifyBaseLogger,\n  type FastifyPluginCallback,\n  type FastifyPluginOptions,\n  type FastifyRequest,\n  type FastifyTypeProvider,\n  type RawServerDefault,\n} from \"fastify\";\n\nimport { type JsonSchemaToTsProvider } from \"@fastify/type-provider-json-schema-to-ts\";\nimport FastifySSEPlugin from \"fastify-sse-v2\";\n\nimport {\n  ChannelManager,\n  MessageHistory,\n  type TMessage,\n} from \"./utils/server-utils\";\n\nconst channelManager = new ChannelManager();\nconst messageHistory = new MessageHistory();\n\nconst eventEmitter: EventEmitter = new EventEmitter();\n\ntype TOptions = FastifyPluginOptions & {\n  schema?: Record<string, any>;\n  preHandler?: any;\n\n  didRegisterToChannel?: (channel: string) => void;\n  // This was added since preHandler doesn't have the correct augemented types\n  // on request.\n  canRegisterToChannel?: (\n    request: FastifyRequest,\n    channel: string,\n  ) => Promise<boolean> | boolean;\n};\n\n// https://seg.phault.net/blog/2018/03/async-iterators-cancellation/\n\n/**\n * A downside to this implementation is that `/route/a/<channel>` and\n * `/route/b/<channel>` receive the same events when `<channel>` are the same.\n *\n * The best usage of this is to have a single connection per client, and\n * differnet event listners attached to that one connection.\n */\nconst fastifyPlugin: FastifyPluginCallback<\n  TOptions,\n  RawServerDefault,\n  FastifyTypeProvider,\n  FastifyBaseLogger\n> = (fastifyInstance, opts, done) => {\n  const server = fastifyInstance.withTypeProvider<JsonSchemaToTsProvider>();\n\n  // This might be a problem if imported multiple times?\n\n  server.register(FastifySSEPlugin);\n\n  server.get(\"/:channel\", {\n    schema: {\n      ...(opts.schema ?? {}),\n      params: {\n        type: \"object\",\n        properties: {\n          channel: {\n            type: \"string\",\n          },\n        },\n        required: [\"channel\"],\n      },\n      headers: {\n        type: \"object\",\n        properties: {\n          \"last-event-id\": {\n            type: \"integer\",\n          },\n        },\n      },\n      // response: {\n      //   200: {},\n      // },\n    } as const,\n\n    preHandler: opts.preHandler ?? [],\n\n    async handler(request, reply) {\n      const channel = request.params.channel;\n      const lastEventId: number | undefined = request.headers[\"last-event-id\"];\n      const didRegisterToChannel = opts?.didRegisterToChannel ?? (() => null);\n      const canRegisterToChannel = opts?.canRegisterToChannel ?? (() => true);\n\n      if (await canRegisterToChannel(request, channel)) {\n        const missedMessages = messageHistory.messageHistoryForChannel(\n          channel,\n          lastEventId,\n        );\n\n        const ua = request.headers[\"user-agent\"];\n\n        const raw = reply.raw;\n        const abortController = new AbortController();\n\n        channelManager.addClient(channel, raw);\n\n        console.log(\"*************\");\n        console.log(\"SSE Request MADE\");\n        console.log(\"UA: \", ua);\n        console.log(\"*************\");\n\n        request.socket.on(\"close\", () => {\n          console.log(\"*************\");\n          console.log(\"SSE Request Closed\");\n          console.log(\"UA: \", ua);\n          console.log(\"*************\");\n\n          channelManager.removeClient(channel, raw);\n          abortController.abort();\n        });\n\n        /**\n         * This needs to be called after the response is made.  Placing it after\n         * reply.sse(), however, makes it inaccessible.\n         *\n         * We use a `setTimeout` to get around that.\n         */\n\n        setTimeout(() => didRegisterToChannel(channel));\n\n        reply.sse(\n          (async function* () {\n            // yield all missed messages based on lastEventId\n            for (const missedMessage of missedMessages) {\n              yield missedMessage;\n            }\n\n            // nodejs.org/api/events.html#eventsonemitter-eventname-options\n\n            try {\n              for await (\n                const events of on(eventEmitter, channel, {\n                  signal: abortController.signal,\n                })\n              ) {\n                for (let event of events) {\n                  yield event;\n                }\n              }\n            } catch {\n              // console.log(\"boooooo\");\n            }\n          })(),\n        );\n      } else {\n        return reply.code(400).send({ error: \"Bad Request\" });\n      }\n    },\n  });\n\n  done();\n};\n\n/**\n * I struggled to make the eventName define the payload, but seems I need to\n * explicity set it.\n *\n * @param channel\n * @param eventName\n * @param payload\n * @returns\n */\nconst sendSSEMessage = <\n  EMap extends Record<string, any>,\n  T extends keyof EMap & string,\n>(\n  channel: string,\n  eventName: T,\n  payload: EMap[T],\n) => {\n  // create a message\n  const message: TMessage = {\n    event: eventName,\n    data: JSON.stringify(payload),\n    id: messageHistory.nextId(),\n  };\n\n  // push it onto the history stack\n  messageHistory.push(channel, message);\n\n  // fire it off\n  eventEmitter.emit(channel, message);\n\n  return message;\n};\n\nconst getConnectionCount = (channel: string) =>\n  channelManager.getConnectionCount(channel);\n\nexport { fastifyPlugin, getConnectionCount, sendSSEMessage };\n"],"names":["ChannelManager","constructor","channels","Map","addClient","channel","client","clients","getClients","add","removeClient","delete","size","has","set","Set","get","getConnectionCounts","result","entries","getConnectionCount","MessageHistory","messageHistory","lastId","messageHistoryForChannel","channelName","lastEventId","undefined","filter","item","id","map","message","push","slice","nextId","channelManager","eventEmitter","EventEmitter","fastifyPlugin","fastifyInstance","opts","done","_opts$schema","_opts$preHandler","server","withTypeProvider","register","FastifySSEPlugin","schema","params","type","properties","required","headers","preHandler","handler","request","reply","_opts$didRegisterToCh","_opts$canRegisterToCh","didRegisterToChannel","canRegisterToChannel","missedMessages","ua","raw","abortController","AbortController","console","log","socket","on","abort","setTimeout","sse","missedMessage","events","signal","event","code","send","error","sendSSEMessage","eventName","payload","data","JSON","stringify","emit"],"mappings":"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"}