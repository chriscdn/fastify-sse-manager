{"version":3,"file":"client.modern.js","sources":["../src/client.ts"],"sourcesContent":["class Client<T> {\n  private eventSource: EventSource | null;\n  private _callbacks: Record<string, any>;\n\n  constructor(private path: string) {\n    //}, private channel: string) {\n    // const fullPath: string = urljoin(path, channel);\n\n    this.eventSource = new EventSource(path);\n    // this.channel = channel;\n\n    // open and error are reserved\n    this.eventSource.addEventListener(\"open\", this.onOpen.bind(this));\n    this.eventSource.addEventListener(\"error\", this.onError.bind(this));\n\n    // close is a standard message, hijacked for our purposes\n    this.eventSource.addEventListener(\"close\", this.close.bind(this));\n\n    // keep record of our callback functions to make them available to removeEventListener\n    this._callbacks = {};\n  }\n\n  onOpen(event: MessageEvent) {\n    // console.log(\"onOpen\");\n  }\n  onError(event: MessageEvent) {\n    // console.log(\"onError\");\n  }\n\n  close() {\n    this.eventSource?.close();\n    this.eventSource = null;\n    this._callbacks = {};\n  }\n\n  addEventListener<T>(\n    eventName: string,\n    _callback: ({ type, data }: { type: string; data: T }) => void,\n  ) {\n    const callback = (event: MessageEvent) => {\n      const type: string = event.type;\n      const data: T = JSON.parse(event.data);\n\n      _callback({\n        type,\n        data,\n      });\n    };\n\n    // Only one listenter at a time.  If a second is needed, then change the code and document why.\n    this.removeEventListener(eventName);\n\n    this._callbacks[eventName] = callback;\n\n    this.eventSource?.addEventListener(eventName, callback);\n  }\n\n  removeEventListener(eventName: string) {\n    const callback = this._callbacks[eventName];\n\n    if (callback) {\n      this.eventSource?.removeEventListener(eventName, callback);\n      delete this._callbacks[eventName];\n    }\n  }\n}\n\nexport { Client };\n"],"names":["Client","constructor","path","this","eventSource","_callbacks","EventSource","addEventListener","onOpen","bind","onError","close","event","_this$eventSource","eventName","_callback","_this$eventSource2","callback","type","data","JSON","parse","removeEventListener","_this$eventSource3"],"mappings":"AAAA,MAAMA,EAIJC,WAAAA,CAAoBC,GAAYC,KAAZD,UAAA,EAAAC,KAHZC,iBAAW,EAAAD,KACXE,gBAAU,EAEEF,KAAID,KAAJA,EAIlBC,KAAKC,YAAc,IAAIE,YAAYJ,GAInCC,KAAKC,YAAYG,iBAAiB,OAAQJ,KAAKK,OAAOC,KAAKN,OAC3DA,KAAKC,YAAYG,iBAAiB,QAASJ,KAAKO,QAAQD,KAAKN,OAG7DA,KAAKC,YAAYG,iBAAiB,QAASJ,KAAKQ,MAAMF,KAAKN,OAG3DA,KAAKE,WAAa,CAAA,CACpB,CAEAG,MAAAA,CAAOI,GAAmB,CAG1BF,OAAAA,CAAQE,GAIRD,CAAAA,KAAAA,GAAKE,IAAAA,EACHA,OAAAA,EAAAV,KAAKC,cAALS,EAAkBF,QAClBR,KAAKC,YAAc,KACnBD,KAAKE,WAAa,CACpB,CAAA,CAEAE,gBAAAA,CACEO,EACAC,GAA8D,IAAAC,EAE9D,MAAMC,EAAYL,IAChB,MAAMM,EAAeN,EAAMM,KACrBC,EAAUC,KAAKC,MAAMT,EAAMO,MAEjCJ,EAAU,CACRG,OACAC,QACD,EAIHhB,KAAKmB,oBAAoBR,GAEzBX,KAAKE,WAAWS,GAAaG,EAEb,OAAhBD,EAAIb,KAACC,cAALY,EAAkBT,iBAAiBO,EAAWG,EAChD,CAEAK,mBAAAA,CAAoBR,GAClB,MAAMG,EAAWd,KAAKE,WAAWS,GAEnB,IAAAS,EAAVN,IACc,OAAhBM,EAAIpB,KAACC,cAALmB,EAAkBD,oBAAoBR,EAAWG,UAC1Cd,KAAKE,WAAWS,GAE3B"}