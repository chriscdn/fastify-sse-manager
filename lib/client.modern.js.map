{"version":3,"file":"client.modern.js","sources":["../src/client.ts"],"sourcesContent":["import urlJoin from \"url-join\";\n\nclass Client<EMap extends Record<string, any>> {\n  private eventSource: EventSource | null;\n  private _callbacks: Record<string, any>;\n\n  private onOpenBound: (event: MessageEvent) => void;\n  private onErrorBound: (event: MessageEvent) => void;\n  private closeBound: (event: MessageEvent) => void;\n\n  constructor(path: string, channel?: string) {\n    const resolvedPath = channel ? urlJoin(path, channel) : path;\n\n    // console.log(`Connecting to: ${resolvedPath}`);\n\n    this.eventSource = new EventSource(resolvedPath);\n\n    this.onOpenBound = this.onOpen.bind(this);\n    this.onErrorBound = this.onError.bind(this);\n    this.closeBound = this.close.bind(this);\n\n    // open and error are reserved\n    this.eventSource.addEventListener(\"open\", this.onOpenBound);\n    this.eventSource.addEventListener(\"error\", this.onErrorBound);\n\n    // close is a standard message, hijacked for our purposes\n    this.eventSource.addEventListener(\n      \"close\",\n      this.closeBound,\n    );\n\n    // keep record of our callback functions to make them available to removeEventListener\n    this._callbacks = {};\n  }\n\n  onOpen(event: MessageEvent) {\n    // console.log(\"onOpen\");\n  }\n  onError(event: MessageEvent) {\n    // console.log(\"onError\");\n  }\n\n  close() {\n    // close and cleanup\n    if (this.eventSource) {\n      this.eventSource.removeEventListener(\"open\", this.onOpenBound);\n      this.eventSource.removeEventListener(\"error\", this.onErrorBound);\n      this.eventSource.removeEventListener(\"close\", this.closeBound);\n      this.removeAllEventListener();\n      // this._callbacks = {};\n      this.eventSource.close();\n      this.eventSource = null;\n    }\n  }\n\n  addEventListener<K extends keyof EMap & string>(\n    eventName: K,\n    _callback: (event: { type: K; data: EMap[K] }) => void,\n  ) {\n    const callback = (event: MessageEvent) => {\n      const data = JSON.parse(event.data) as EMap[K];\n\n      _callback({\n        type: eventName,\n        data,\n      });\n    };\n\n    // Only one listener at a time per event.\n    this.removeEventListener(eventName);\n\n    this._callbacks[eventName] = callback;\n\n    this.eventSource?.addEventListener(eventName, callback);\n\n    const stopListening = () => this.removeEventListener(eventName);\n\n    return stopListening;\n  }\n\n  removeEventListener(eventName: string) {\n    const callback = this._callbacks[eventName];\n\n    if (callback) {\n      this.eventSource?.removeEventListener(eventName, callback);\n      delete this._callbacks[eventName];\n    }\n  }\n\n  removeAllEventListener() {\n    Object.keys(this._callbacks).forEach((callbackName) =>\n      this.removeEventListener(callbackName)\n    );\n  }\n}\n\n// class ClientManager {\n//   private clients: Map<string, Client> = new Map();\n\n//   getClient(path: string, channel?: string) {\n//     const resolvedPath = channel ? urlJoin(path, channel) : path;\n\n//     if (!this.clients.has(resolvedPath)) {\n//       this.clients.set(resolvedPath, new Client(resolvedPath));\n//     }\n\n//     const client = this.clients.get(resolvedPath)!;\n\n//     const close = () => {\n//       client.close();\n//       this.clients.delete(resolvedPath);\n//     };\n\n//     return { close, client };\n//   }\n// }\n\nexport { Client };\n"],"names":["Client","constructor","path","channel","this","eventSource","_callbacks","onOpenBound","onErrorBound","closeBound","resolvedPath","urlJoin","EventSource","onOpen","bind","onError","close","addEventListener","event","removeEventListener","removeAllEventListener","eventName","_callback","_this$eventSource","callback","data","JSON","parse","type","stopListening","_this$eventSource2","Object","keys","forEach","callbackName"],"mappings":"wBAEA,MAAMA,EAQJC,WAAAA,CAAYC,EAAcC,GAAgBC,KAPlCC,iBACAC,EAAAA,KAAAA,uBAEAC,iBAAW,EAAAH,KACXI,kBACAC,EAAAA,KAAAA,kBAGN,MAAMC,EAAeP,EAAUQ,EAAQT,EAAMC,GAAWD,EAIxDE,KAAKC,YAAc,IAAIO,YAAYF,GAEnCN,KAAKG,YAAcH,KAAKS,OAAOC,KAAKV,MACpCA,KAAKI,aAAeJ,KAAKW,QAAQD,KAAKV,MACtCA,KAAKK,WAAaL,KAAKY,MAAMF,KAAKV,MAGlCA,KAAKC,YAAYY,iBAAiB,OAAQb,KAAKG,aAC/CH,KAAKC,YAAYY,iBAAiB,QAASb,KAAKI,cAGhDJ,KAAKC,YAAYY,iBACf,QACAb,KAAKK,YAIPL,KAAKE,WAAa,CAAA,CACpB,CAEAO,MAAAA,CAAOK,GAAmB,CAG1BH,OAAAA,CAAQG,GAIRF,CAAAA,KAAAA,GAEMZ,KAAKC,cACPD,KAAKC,YAAYc,oBAAoB,OAAQf,KAAKG,aAClDH,KAAKC,YAAYc,oBAAoB,QAASf,KAAKI,cACnDJ,KAAKC,YAAYc,oBAAoB,QAASf,KAAKK,YACnDL,KAAKgB,yBAELhB,KAAKC,YAAYW,QACjBZ,KAAKC,YAAc,KAEvB,CAEAY,gBAAAA,CACEI,EACAC,GAAsD,IAAAC,EAEtD,MAAMC,EAAYN,IAChB,MAAMO,EAAOC,KAAKC,MAAMT,EAAMO,MAE9BH,EAAU,CACRM,KAAMP,EACNI,QACD,EAYH,OARArB,KAAKe,oBAAoBE,GAEzBjB,KAAKE,WAAWe,GAAaG,EAE7BD,OAAAA,EAAInB,KAACC,cAALkB,EAAkBN,iBAAiBI,EAAWG,GAExBK,IAAMzB,KAAKe,oBAAoBE,EAGvD,CAEAF,mBAAAA,CAAoBE,GAClB,MAAMG,EAAWpB,KAAKE,WAAWe,GAEnB,IAAAS,EAAVN,IACFM,OAAAA,EAAI1B,KAACC,cAALyB,EAAkBX,oBAAoBE,EAAWG,eACrClB,WAAWe,GAE3B,CAEAD,sBAAAA,GACEW,OAAOC,KAAK5B,KAAKE,YAAY2B,QAASC,GACpC9B,KAAKe,oBAAoBe,GAE7B"}