{"version":3,"file":"client.cjs","sources":["../src/client.ts"],"sourcesContent":["import urlJoin from \"url-join\";\n\nclass Client<EMap extends Record<string, any>> {\n  private eventSource: EventSource | null;\n  private _callbacks: Record<string, any>;\n\n  private onOpenBound: (event: MessageEvent) => void;\n  private onErrorBound: (event: MessageEvent) => void;\n  private closeBound: (event: MessageEvent) => void;\n\n  constructor(path: string, channel?: string) {\n    const resolvedPath = channel ? urlJoin(path, channel) : path;\n\n    // console.log(`Connecting to: ${resolvedPath}`);\n\n    this.eventSource = new EventSource(resolvedPath);\n\n    this.onOpenBound = this.onOpen.bind(this);\n    this.onErrorBound = this.onError.bind(this);\n    this.closeBound = this.close.bind(this);\n\n    // open and error are reserved\n    this.eventSource.addEventListener(\"open\", this.onOpenBound);\n    this.eventSource.addEventListener(\"error\", this.onErrorBound);\n\n    // close is a standard message, hijacked for our purposes\n    this.eventSource.addEventListener(\n      \"close\",\n      this.closeBound,\n    );\n\n    // keep record of our callback functions to make them available to removeEventListener\n    this._callbacks = {};\n  }\n\n  onOpen(event: MessageEvent) {\n    // console.log(\"onOpen\");\n  }\n  onError(event: MessageEvent) {\n    // console.log(\"onError\");\n  }\n\n  close() {\n    // close and cleanup\n    if (this.eventSource) {\n      this.eventSource.removeEventListener(\"open\", this.onOpenBound);\n      this.eventSource.removeEventListener(\"error\", this.onErrorBound);\n      this.eventSource.removeEventListener(\"close\", this.closeBound);\n      this.removeAllEventListener();\n      // this._callbacks = {};\n      this.eventSource.close();\n      this.eventSource = null;\n    }\n  }\n\n  addEventListener<K extends keyof EMap & string>(\n    eventName: K,\n    _callback: (event: { type: K; data: EMap[K] }) => void,\n  ) {\n    const callback = (event: MessageEvent) => {\n      const data = JSON.parse(event.data) as EMap[K];\n\n      _callback({\n        type: eventName,\n        data,\n      });\n    };\n\n    // Only one listener at a time per event.\n    this.removeEventListener(eventName);\n\n    this._callbacks[eventName] = callback;\n\n    this.eventSource?.addEventListener(eventName, callback);\n\n    const stopListening = () => this.removeEventListener(eventName);\n\n    return stopListening;\n  }\n\n  removeEventListener(eventName: string) {\n    const callback = this._callbacks[eventName];\n\n    if (callback) {\n      this.eventSource?.removeEventListener(eventName, callback);\n      delete this._callbacks[eventName];\n    }\n  }\n\n  removeAllEventListener() {\n    Object.keys(this._callbacks).forEach((callbackName) =>\n      this.removeEventListener(callbackName)\n    );\n  }\n}\n\n// class ClientManager {\n//   private clients: Map<string, Client> = new Map();\n\n//   getClient(path: string, channel?: string) {\n//     const resolvedPath = channel ? urlJoin(path, channel) : path;\n\n//     if (!this.clients.has(resolvedPath)) {\n//       this.clients.set(resolvedPath, new Client(resolvedPath));\n//     }\n\n//     const client = this.clients.get(resolvedPath)!;\n\n//     const close = () => {\n//       client.close();\n//       this.clients.delete(resolvedPath);\n//     };\n\n//     return { close, client };\n//   }\n// }\n\nexport { Client };\n"],"names":["Client","path","channel","this","eventSource","_callbacks","onOpenBound","onErrorBound","closeBound","resolvedPath","urlJoin","EventSource","onOpen","bind","onError","close","addEventListener","_proto","prototype","event","removeEventListener","removeAllEventListener","eventName","_callback","_this$eventSource","_this","callback","data","JSON","parse","type","_this$eventSource2","_this2","Object","keys","forEach","callbackName"],"mappings":"8IAEY,WAQV,SAAAA,EAAYC,EAAcC,GAAgBC,KAPlCC,iBAAW,EAAAD,KACXE,gBAEAC,EAAAA,KAAAA,iBACAC,EAAAA,KAAAA,kBACAC,EAAAA,KAAAA,kBAGN,IAAMC,EAAeP,EAAUQ,EAAO,QAACT,EAAMC,GAAWD,EAIxDE,KAAKC,YAAc,IAAIO,YAAYF,GAEnCN,KAAKG,YAAcH,KAAKS,OAAOC,KAAKV,MACpCA,KAAKI,aAAeJ,KAAKW,QAAQD,KAAKV,MACtCA,KAAKK,WAAaL,KAAKY,MAAMF,KAAKV,MAGlCA,KAAKC,YAAYY,iBAAiB,OAAQb,KAAKG,aAC/CH,KAAKC,YAAYY,iBAAiB,QAASb,KAAKI,cAGhDJ,KAAKC,YAAYY,iBACf,QACAb,KAAKK,YAIPL,KAAKE,WAAa,CACpB,CAAA,CAAC,IAAAY,EAAAjB,EAAAkB,UA4DAlB,OA5DAiB,EAEDL,OAAA,SAAOO,GAAmB,EAEzBF,EACDH,QAAA,SAAQK,GAEP,EAAAF,EAEDF,MAAA,WAEMZ,KAAKC,cACPD,KAAKC,YAAYgB,oBAAoB,OAAQjB,KAAKG,aAClDH,KAAKC,YAAYgB,oBAAoB,QAASjB,KAAKI,cACnDJ,KAAKC,YAAYgB,oBAAoB,QAASjB,KAAKK,YACnDL,KAAKkB,yBAELlB,KAAKC,YAAYW,QACjBZ,KAAKC,YAAc,KAEvB,EAACa,EAEDD,iBAAA,SACEM,EACAC,GAAsDC,IAAAA,EAAAC,EAEtDtB,KAAMuB,EAAW,SAACP,GAChB,IAAMQ,EAAOC,KAAKC,MAAMV,EAAMQ,MAE9BJ,EAAU,CACRO,KAAMR,EACNK,KAAAA,GAEJ,EAWA,OARAxB,KAAKiB,oBAAoBE,GAEzBnB,KAAKE,WAAWiB,GAAaI,EAEb,OAAhBF,EAAArB,KAAKC,cAALoB,EAAkBR,iBAAiBM,EAAWI,GAExB,WAAH,OAASD,EAAKL,oBAAoBE,EAAU,CAGjE,EAACL,EAEDG,oBAAA,SAAoBE,GAClB,IAEcS,EAFRL,EAAWvB,KAAKE,WAAWiB,GAE7BI,IACFK,OAAAA,OAAK3B,cAAL2B,EAAkBX,oBAAoBE,EAAWI,eACrCrB,WAAWiB,GAE3B,EAACL,EAEDI,uBAAA,WAAsBW,IAAAA,EACpBC,KAAAA,OAAOC,KAAK/B,KAAKE,YAAY8B,QAAQ,SAACC,GACpC,OAAAJ,EAAKZ,oBAAoBgB,EAAa,EAE1C,EAACpC,CAAA,CA3FS"}